"""
·ª®ng d·ª•ng GUI ƒë∆°n gi·∫£n cho h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t
S·ª≠ d·ª•ng Tkinter ƒë·ªÉ t·∫°o giao di·ªán th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import threading
import cv2
from PIL import Image, ImageTk
import os
import datetime
import json

# Import c√°c module t·ª´ d·ª± √°n
from modules.face_loader import FaceEncoder
from modules.webcam import recognize_from_webcam
from modules.image_processor import recognize_from_image
from modules.attendance import AttendanceSystem

class SimpleFaceRecognitionApp:
    def __init__(self, root):
        """Kh·ªüi t·∫°o ·ª©ng d·ª•ng"""
        self.root = root
        self.setup_window()
        
        # Kh·ªüi t·∫°o c√°c ƒë·ªëi t∆∞·ª£ng x·ª≠ l√Ω
        self.encoder = FaceEncoder()
        self.attendance_system = AttendanceSystem()
        
        # T·∫°o giao di·ªán
        self.create_interface()
        
        # T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
        self.load_initial_data()

    def setup_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh"""
        self.root.title("üéØ H·ªá Th·ªëng Nh·∫≠n Di·ªán Khu√¥n M·∫∑t")
        self.root.geometry("900x600")
        self.root.configure(bg='#f0f0f0')
        
        # ƒê·∫∑t c·ª≠a s·ªï ·ªü gi·ªØa m√†n h√¨nh
        self.center_window()
        
        # X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng c·ª≠a s·ªï
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def center_window(self):
        """ƒê·∫∑t c·ª≠a s·ªï ·ªü gi·ªØa m√†n h√¨nh"""
        self.root.update_idletasks()
        width = 900
        height = 600
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')

    def create_interface(self):
        """T·∫°o giao di·ªán ng∆∞·ªùi d√πng"""
        # Frame ch√≠nh
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill="both", expand=True)
        
        # Ti√™u ƒë·ªÅ
        title_label = ttk.Label(
            main_frame, 
            text="üéØ H·ªÜ TH·ªêNG NH·∫¨N DI·ªÜN KHU√îN M·∫∂T", 
            font=("Arial", 18, "bold")
        )
        title_label.pack(pady=(0, 20))
        
        # Th√¥ng tin h·ªá th·ªëng
        self.info_label = ttk.Label(
            main_frame,
            text="üë• ƒêang t·∫£i d·ªØ li·ªáu...",
            font=("Arial", 10)
        )
        self.info_label.pack(pady=(0, 20))
        
        # T·∫°o notebook cho c√°c tab
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill="both", expand=True)
        
        # Tab 1: Nh·∫≠n di·ªán
        self.create_recognition_tab()
        
        # Tab 2: Qu·∫£n l√Ω ng∆∞·ªùi d√πng
        self.create_user_management_tab()
        
        # Tab 3: ƒêi·ªÉm danh
        self.create_attendance_tab()
        
        # Tab 4: B√°o c√°o
        self.create_report_tab()
        
        # Thanh tr·∫°ng th√°i
        self.status_label = ttk.Label(
            main_frame,
            text="üü¢ S·∫µn s√†ng",
            font=("Arial", 9)
        )
        self.status_label.pack(side="bottom", pady=(10, 0))

    def create_recognition_tab(self):
        """T·∫°o tab nh·∫≠n di·ªán"""
        recognition_frame = ttk.Frame(self.notebook)
        self.notebook.add(recognition_frame, text="üîç Nh·∫≠n Di·ªán")
        
        # Frame cho c√°c n√∫t
        button_frame = ttk.LabelFrame(recognition_frame, text="Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠n di·ªán", padding="20")
        button_frame.pack(fill="x", padx=20, pady=20)
        
        # N√∫t nh·∫≠n di·ªán qua webcam
        webcam_btn = ttk.Button(
            button_frame,
            text="üì∑ Nh·∫≠n Di·ªán Qua Webcam",
            command=self.start_webcam_recognition,
            width=30
        )
        webcam_btn.pack(pady=10)
        
        # N√∫t nh·∫≠n di·ªán t·ª´ ·∫£nh
        image_btn = ttk.Button(
            button_frame,
            text="üñºÔ∏è Nh·∫≠n Di·ªán T·ª´ ·∫¢nh",
            command=self.start_image_recognition,
            width=30
        )
        image_btn.pack(pady=10)
        
        # Frame hi·ªÉn th·ªã k·∫øt qu·∫£
        result_frame = ttk.LabelFrame(recognition_frame, text="K·∫øt qu·∫£", padding="10")
        result_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        self.recognition_result = scrolledtext.ScrolledText(
            result_frame,
            wrap=tk.WORD,
            height=10,
            font=("Consolas", 9)
        )
        self.recognition_result.pack(fill="both", expand=True)

    def create_user_management_tab(self):
        """T·∫°o tab qu·∫£n l√Ω ng∆∞·ªùi d√πng"""
        user_frame = ttk.Frame(self.notebook)
        self.notebook.add(user_frame, text="üë• Qu·∫£n L√Ω Ng∆∞·ªùi D√πng")
        
        # Frame cho c√°c n√∫t
        button_frame = ttk.LabelFrame(user_frame, text="Ch·ª©c nƒÉng", padding="20")
        button_frame.pack(fill="x", padx=20, pady=20)
        
        # T·∫°o grid cho c√°c n√∫t
        ttk.Button(
            button_frame,
            text="üìã Xem Danh S√°ch",
            command=self.view_users,
            width=25
        ).grid(row=0, column=0, padx=10, pady=5)
        
        ttk.Button(
            button_frame,
            text="‚ûï Th√™m Ng∆∞·ªùi D√πng",
            command=self.add_user,
            width=25
        ).grid(row=0, column=1, padx=10, pady=5)
        
        ttk.Button(
            button_frame,
            text="‚úèÔ∏è S·ª≠a Th√¥ng Tin",
            command=self.edit_user,
            width=25
        ).grid(row=1, column=0, padx=10, pady=5)
        
        ttk.Button(
            button_frame,
            text="üóëÔ∏è X√≥a Ng∆∞·ªùi D√πng",
            command=self.delete_user,
            width=25
        ).grid(row=1, column=1, padx=10, pady=5)
        
        # Frame hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng
        list_frame = ttk.LabelFrame(user_frame, text="Danh s√°ch ng∆∞·ªùi d√πng", padding="10")
        list_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # Treeview ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch
        columns = ("T√™n", "Tu·ªïi", "ƒê·ªãa ch·ªâ")
        self.user_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=8)
        
        for col in columns:
            self.user_tree.heading(col, text=col)
            self.user_tree.column(col, width=150)
        
        # Scrollbar cho treeview
        scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=self.user_tree.yview)
        self.user_tree.configure(yscrollcommand=scrollbar.set)
        
        self.user_tree.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def create_attendance_tab(self):
        """T·∫°o tab ƒëi·ªÉm danh"""
        attendance_frame = ttk.Frame(self.notebook)
        self.notebook.add(attendance_frame, text="üìä ƒêi·ªÉm Danh")
        
        # Frame cho c√°c n√∫t
        button_frame = ttk.LabelFrame(attendance_frame, text="Ch·ª©c nƒÉng ƒëi·ªÉm danh", padding="20")
        button_frame.pack(fill="x", padx=20, pady=20)
        
        ttk.Button(
            button_frame,
            text="‚úÖ Check-in",
            command=self.start_checkin,
            width=20
        ).pack(side="left", padx=10)
        
        ttk.Button(
            button_frame,
            text="üì§ Check-out",
            command=self.start_checkout,
            width=20
        ).pack(side="left", padx=10)
        
        ttk.Button(
            button_frame,
            text="üîÑ T·∫£i L·∫°i D·ªØ Li·ªáu",
            command=self.reload_data,
            width=20
        ).pack(side="left", padx=10)
        
        # Frame hi·ªÉn th·ªã th√¥ng tin ƒëi·ªÉm danh h√¥m nay
        today_frame = ttk.LabelFrame(attendance_frame, text="ƒêi·ªÉm danh h√¥m nay", padding="10")
        today_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        self.attendance_text = scrolledtext.ScrolledText(
            today_frame,
            wrap=tk.WORD,
            height=12,
            font=("Consolas", 9)
        )
        self.attendance_text.pack(fill="both", expand=True)

    def create_report_tab(self):
        """T·∫°o tab b√°o c√°o"""
        report_frame = ttk.Frame(self.notebook)
        self.notebook.add(report_frame, text="üìà B√°o C√°o")
        
        # Frame cho c√°c t√πy ch·ªçn
        options_frame = ttk.LabelFrame(report_frame, text="T√πy ch·ªçn b√°o c√°o", padding="15")
        options_frame.pack(fill="x", padx=20, pady=20)
        
        # Ch·ªçn ng√†y
        ttk.Label(options_frame, text="Ng√†y:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self.date_var = tk.StringVar(value=datetime.date.today().isoformat())
        date_entry = ttk.Entry(options_frame, textvariable=self.date_var, width=12)
        date_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(options_frame, text="H√¥m nay", command=self.set_today).grid(row=0, column=2, padx=5, pady=5)
        
        # C√°c n√∫t b√°o c√°o
        ttk.Button(
            options_frame,
            text="üìä Xem B√°o C√°o",
            command=self.show_report,
            width=15
        ).grid(row=1, column=0, padx=5, pady=10)
        
        ttk.Button(
            options_frame,
            text="üìã Xu·∫•t Excel",
            command=self.export_excel,
            width=15
        ).grid(row=1, column=1, padx=5, pady=10)
        
        # Frame hi·ªÉn th·ªã b√°o c√°o
        report_display_frame = ttk.LabelFrame(report_frame, text="B√°o c√°o", padding="10")
        report_display_frame.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        self.report_text = scrolledtext.ScrolledText(
            report_display_frame,
            wrap=tk.WORD,
            font=("Consolas", 9)
        )
        self.report_text.pack(fill="both", expand=True)

    def load_initial_data(self):
        """T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu"""
        self.log_message("üöÄ ƒêang kh·ªüi ƒë·ªông h·ªá th·ªëng...")
        self.update_status("ƒêang t·∫£i d·ªØ li·ªáu...")
        
        def load_worker():
            try:
                # T·∫£i d·ªØ li·ªáu khu√¥n m·∫∑t
                if not self.encoder.load_encodings():
                    if self.encoder.load_photos():
                        self.encoder.save_encodings()
                        self.root.after(0, lambda: self.log_message("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ ·∫£nh"))
                    else:
                        self.root.after(0, lambda: self.log_message("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu khu√¥n m·∫∑t"))
                else:
                    self.root.after(0, lambda: self.log_message("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ file encodings"))
                
                # C·∫≠p nh·∫≠t giao di·ªán
                self.root.after(0, self.update_user_info)
                self.root.after(0, self.refresh_user_list)
                self.root.after(0, self.refresh_attendance_today)
                self.root.after(0, lambda: self.update_status("üü¢ S·∫µn s√†ng"))
                self.root.after(0, lambda: self.log_message("üéâ H·ªá th·ªëng s·∫µn s√†ng ho·∫°t ƒë·ªông!"))
                
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"‚ùå L·ªói kh·ªüi t·∫°o: {str(e)}"))
                self.root.after(0, lambda: self.update_status("‚ùå L·ªói kh·ªüi t·∫°o"))
        
        threading.Thread(target=load_worker, daemon=True).start()

    def log_message(self, message, target=None):
        """Ghi log message"""
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        
        if target is None:
            target = self.recognition_result
        
        target.insert(tk.END, log_entry)
        target.see(tk.END)

    def update_status(self, message):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i"""
        self.status_label.config(text=message)

    def update_user_info(self):
        """C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng"""
        try:
            users = self.encoder.get_all_users()
            count = len(users)
            self.info_label.config(text=f"üë• {count} ng∆∞·ªùi d√πng trong h·ªá th·ªëng")
        except:
            self.info_label.config(text="üë• 0 ng∆∞·ªùi d√πng trong h·ªá th·ªëng")

    # ==================== CH·ª®C NƒÇNG NH·∫¨N DI·ªÜN ====================

    def start_webcam_recognition(self):
        """B·∫Øt ƒë·∫ßu nh·∫≠n di·ªán qua webcam"""
        self.log_message("üì∑ ƒêang kh·ªüi ƒë·ªông nh·∫≠n di·ªán qua webcam...")
        self.update_status("ƒêang m·ªü webcam...")
        
        def worker():
            try:
                known_face_encodings, known_face_names = self.encoder.get_encodings()
                recognize_from_webcam(
                    known_face_encodings,
                    known_face_names,
                    self.encoder.get_all_users(),
                    camera_id=1
                )
                self.root.after(0, lambda: self.log_message("‚úÖ ƒê√£ ho√†n th√†nh nh·∫≠n di·ªán qua webcam"))
                self.root.after(0, lambda: self.update_status("üü¢ S·∫µn s√†ng"))
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"‚ùå L·ªói webcam: {str(e)}"))
                self.root.after(0, lambda: self.update_status("‚ùå L·ªói webcam"))
        
        threading.Thread(target=worker, daemon=True).start()

    def start_image_recognition(self):
        """B·∫Øt ƒë·∫ßu nh·∫≠n di·ªán t·ª´ ·∫£nh"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán",
            filetypes=[
                ("Image files", "*.jpg *.jpeg *.png *.bmp *.gif"),
                ("All files", "*.*")
            ]
        )
        
        if not file_path:
            return
        
        self.log_message(f"üñºÔ∏è ƒêang nh·∫≠n di·ªán ·∫£nh: {os.path.basename(file_path)}")
        self.update_status("ƒêang x·ª≠ l√Ω ·∫£nh...")
        
        def worker():
            try:
                known_face_encodings, known_face_names = self.encoder.get_encodings()
                recognize_from_image(
                    file_path,
                    known_face_encodings,
                    known_face_names,
                    self.encoder.get_all_users()
                )
                self.root.after(0, lambda: self.log_message("‚úÖ ƒê√£ ho√†n th√†nh nh·∫≠n di·ªán ·∫£nh"))
                self.root.after(0, lambda: self.update_status("üü¢ S·∫µn s√†ng"))
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"‚ùå L·ªói nh·∫≠n di·ªán ·∫£nh: {str(e)}"))
                self.root.after(0, lambda: self.update_status("‚ùå L·ªói nh·∫≠n di·ªán"))
        
        threading.Thread(target=worker, daemon=True).start()

    # ==================== CH·ª®C NƒÇNG NG∆Ø·ªúI D√ôNG ====================

    def view_users(self):
        """Xem danh s√°ch ng∆∞·ªùi d√πng"""
        self.refresh_user_list()
        messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng")

    def refresh_user_list(self):
        """L√†m m·ªõi danh s√°ch ng∆∞·ªùi d√πng"""
        # X√≥a d·ªØ li·ªáu c≈©
        for item in self.user_tree.get_children():
            self.user_tree.delete(item)
        
        # Th√™m d·ªØ li·ªáu m·ªõi
        users = self.encoder.get_all_users()
        for name, info in users.items():
            age = info.get("age", "Ch∆∞a r√µ")
            address = info.get("address", "Ch∆∞a r√µ")
            self.user_tree.insert("", tk.END, values=(name, age, address))

    def add_user(self):
        """Th√™m ng∆∞·ªùi d√πng m·ªõi"""
        AddUserDialog(self.root, self.encoder, self.on_user_updated)

    def edit_user(self):
        """S·ª≠a th√¥ng tin ng∆∞·ªùi d√πng"""
        selection = self.user_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ s·ª≠a")
            return
        
        item = self.user_tree.item(selection[0])
        user_name = item['values'][0]
        EditUserDialog(self.root, self.encoder, user_name, self.on_user_updated)

    def delete_user(self):
        """X√≥a ng∆∞·ªùi d√πng"""
        selection = self.user_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a")
            return
        
        item = self.user_tree.item(selection[0])
        user_name = item['values'][0]
        
        if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng '{user_name}'?\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c."):
            if self.encoder.delete_user(user_name):
                self.refresh_user_list()
                self.update_user_info()
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a ng∆∞·ªùi d√πng '{user_name}'")
            else:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng")

    def on_user_updated(self):
        """Callback khi c√≥ c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng"""
        self.refresh_user_list()
        self.update_user_info()

    # ==================== CH·ª®C NƒÇNG ƒêI·ªÇM DANH ====================

    def start_checkin(self):
        """B·∫Øt ƒë·∫ßu check-in"""
        self.start_attendance_process(is_checkout=False)

    def start_checkout(self):
        """B·∫Øt ƒë·∫ßu check-out"""
        self.start_attendance_process(is_checkout=True)

    def start_attendance_process(self, is_checkout=False):
        """X·ª≠ l√Ω ƒëi·ªÉm danh"""
        action = "check-out" if is_checkout else "check-in"
        self.log_message(f"üìä B·∫Øt ƒë·∫ßu {action}", self.attendance_text)
        self.update_status(f"ƒêang th·ª±c hi·ªán {action}...")
        
        def worker():
            try:
                known_face_encodings, known_face_names = self.encoder.get_encodings()
                self.attendance_system.take_attendance_webcam(
                    known_face_encodings,
                    known_face_names,
                    self.encoder.get_all_users(),
                    is_checkout=is_checkout,
                    camera_id=1
                )
                self.root.after(0, lambda: self.log_message(f"‚úÖ Ho√†n th√†nh {action}", self.attendance_text))
                self.root.after(0, lambda: self.update_status("üü¢ S·∫µn s√†ng"))
                self.root.after(0, self.refresh_attendance_today)
            except Exception as e:
                self.root.after(0, lambda: self.log_message(f"‚ùå L·ªói {action}: {str(e)}", self.attendance_text))
                self.root.after(0, lambda: self.update_status("‚ùå L·ªói ƒëi·ªÉm danh"))
        
        threading.Thread(target=worker, daemon=True).start()

    def refresh_attendance_today(self):
        """L√†m m·ªõi d·ªØ li·ªáu ƒëi·ªÉm danh h√¥m nay"""
        self.attendance_text.delete("1.0", tk.END)
        
        today_data = self.attendance_system.get_today_attendance()
        
        self.log_message("üìä ƒêI·ªÇM DANH H√îM NAY", self.attendance_text)
        self.log_message("=" * 50, self.attendance_text)
        
        if not today_data:
            self.log_message("Ch∆∞a c√≥ ai ƒëi·ªÉm danh h√¥m nay", self.attendance_text)
            return
        
        for name, info in today_data.items():
            checkin = info.get('checkin', 'Ch∆∞a check-in')
            checkout = info.get('checkout', 'Ch∆∞a check-out')
            self.log_message(f"üë§ {name}: Check-in {checkin}, Check-out {checkout}", self.attendance_text)

    def reload_data(self):
        """T·∫£i l·∫°i d·ªØ li·ªáu"""
        self.load_initial_data()

    # ==================== CH·ª®C NƒÇNG B√ÅO C√ÅO ====================

    def set_today(self):
        """ƒê·∫∑t ng√†y h√¥m nay"""
        self.date_var.set(datetime.date.today().isoformat())

    def show_report(self):
        """Hi·ªÉn th·ªã b√°o c√°o"""
        date = self.date_var.get()
        try:
            datetime.date.fromisoformat(date)
        except ValueError:
            messagebox.showerror("L·ªói", "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng YYYY-MM-DD")
            return
        
        self.report_text.delete("1.0", tk.END)
        
        # L·∫•y d·ªØ li·ªáu ƒëi·ªÉm danh
        attendance_data = self.attendance_system.get_date_attendance(date)
        absent_list = self.attendance_system.get_absent_list(self.encoder.get_unique_users(), date)
        
        # Hi·ªÉn th·ªã b√°o c√°o
        self.log_message(f"üìä B√ÅO C√ÅO ƒêI·ªÇM DANH NG√ÄY {date}", self.report_text)
        self.log_message("=" * 50, self.report_text)
        self.log_message(f"T·ªïng s·ªë: {len(self.encoder.get_unique_users())} ng∆∞·ªùi", self.report_text)
        self.log_message(f"C√≥ m·∫∑t: {len(attendance_data)} ng∆∞·ªùi", self.report_text)
        self.log_message(f"V·∫Øng m·∫∑t: {len(absent_list)} ng∆∞·ªùi", self.report_text)
        self.log_message("", self.report_text)
        
        # Danh s√°ch c√≥ m·∫∑t
        self.log_message("üìã DANH S√ÅCH C√ì M·∫∂T:", self.report_text)
        if attendance_data:
            for i, (name, info) in enumerate(attendance_data.items(), 1):
                checkin = info.get('checkin', 'N/A')
                checkout = info.get('checkout', 'N/A')
                self.log_message(f"{i}. {name} - Check-in: {checkin}, Check-out: {checkout}", self.report_text)
        else:
            self.log_message("(Kh√¥ng c√≥)", self.report_text)
        
        self.log_message("", self.report_text)
        
        # Danh s√°ch v·∫Øng m·∫∑t
        self.log_message("‚ùå DANH S√ÅCH V·∫ÆNG M·∫∂T:", self.report_text)
        if absent_list:
            for i, name in enumerate(absent_list, 1):
                self.log_message(f"{i}. {name}", self.report_text)
        else:
            self.log_message("(Kh√¥ng c√≥)", self.report_text)

    def export_excel(self):
        """Xu·∫•t b√°o c√°o ra Excel"""
        date = self.date_var.get()
        try:
            datetime.date.fromisoformat(date)
        except ValueError:
            messagebox.showerror("L·ªói", "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng YYYY-MM-DD")
            return
        
        if self.attendance_system.export_to_excel(self.encoder.get_unique_users(), date):
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√°o c√°o cho ng√†y {date}")
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o")

    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng ·ª©ng d·ª•ng"""
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ mu·ªën tho√°t ·ª©ng d·ª•ng?"):
            self.root.destroy()


class AddUserDialog:
    """Dialog th√™m ng∆∞·ªùi d√πng m·ªõi"""
    def __init__(self, parent, encoder, callback):
        self.encoder = encoder
        self.callback = callback
        
        self.window = tk.Toplevel(parent)
        self.window.title("‚ûï Th√™m Ng∆∞·ªùi D√πng M·ªõi")
        self.window.geometry("400x350")
        self.window.transient(parent)
        self.window.grab_set()
        
        self.create_widgets()

    def create_widgets(self):
        """T·∫°o c√°c widget"""
        # Frame ch√≠nh
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill="both", expand=True)
        
        # Th√¥ng tin ng∆∞·ªùi d√πng
        ttk.Label(main_frame, text="T√™n:").grid(row=0, column=0, sticky="w", pady=5)
        self.name_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.name_var, width=30).grid(row=0, column=1, pady=5, padx=(10, 0))
        
        ttk.Label(main_frame, text="Tu·ªïi:").grid(row=1, column=0, sticky="w", pady=5)
        self.age_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.age_var, width=30).grid(row=1, column=1, pady=5, padx=(10, 0))
        
        ttk.Label(main_frame, text="ƒê·ªãa ch·ªâ:").grid(row=2, column=0, sticky="w", pady=5)
        self.address_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.address_var, width=30).grid(row=2, column=1, pady=5, padx=(10, 0))
        
        # Ph∆∞∆°ng th·ª©c th√™m
        method_frame = ttk.LabelFrame(main_frame, text="Ph∆∞∆°ng th·ª©c", padding="10")
        method_frame.grid(row=3, column=0, columnspan=2, pady=20, sticky="ew")
        
        self.method_var = tk.StringVar(value="webcam")
        ttk.Radiobutton(method_frame, text="üì∑ Webcam", variable=self.method_var, value="webcam").pack(anchor="w")
        ttk.Radiobutton(method_frame, text="üìÅ File ·∫£nh", variable=self.method_var, value="file").pack(anchor="w")
        
        # N√∫t
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=4, column=0, columnspan=2, pady=20)
        
        ttk.Button(button_frame, text="‚ûï Th√™m", command=self.add_user).pack(side="left", padx=5)
        ttk.Button(button_frame, text="‚ùå H·ªßy", command=self.window.destroy).pack(side="left", padx=5)

    def add_user(self):
        """Th√™m ng∆∞·ªùi d√πng"""
        name = self.name_var.get().strip()
        age = self.age_var.get().strip()
        address = self.address_var.get().strip()
        
        if not name:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng")
            return
        
        self.window.destroy()
        
        def worker():
            try:
                if self.method_var.get() == "webcam":
                    success = self.encoder.add_user_from_webcam(name, age, address, num_photos=3)
                else:
                    file_path = filedialog.askopenfilename(
                        title="Ch·ªçn ·∫£nh ng∆∞·ªùi d√πng",
                        filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp *.gif")]
                    )
                    if file_path:
                        success = self.encoder.add_user_from_image(file_path, name, age, address)
                    else:
                        return
                
                if success:
                    messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m ng∆∞·ªùi d√πng '{name}' th√†nh c√¥ng!")
                    self.callback()
                else:
                    messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ th√™m ng∆∞·ªùi d√πng '{name}'")
            except Exception as e:
                messagebox.showerror("L·ªói", f"L·ªói khi th√™m ng∆∞·ªùi d√πng: {str(e)}")
        
        threading.Thread(target=worker, daemon=True).start()


class EditUserDialog:
    """Dialog s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng"""
    def __init__(self, parent, encoder, user_name, callback):
        self.encoder = encoder
        self.user_name = user_name
        self.callback = callback
        
        self.window = tk.Toplevel(parent)
        self.window.title(f"‚úèÔ∏è S·ª≠a Th√¥ng Tin: {user_name}")
        self.window.geometry("400x250")
        self.window.transient(parent)
        self.window.grab_set()
        
        self.create_widgets()

    def create_widgets(self):
        """T·∫°o c√°c widget"""
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill="both", expand=True)
        
        # L·∫•y th√¥ng tin hi·ªán t·∫°i
        current_info = self.encoder.get_user_info(self.user_name) or {}
        
        # Th√¥ng tin ng∆∞·ªùi d√πng
        ttk.Label(main_frame, text="T√™n:").grid(row=0, column=0, sticky="w", pady=5)
        ttk.Label(main_frame, text=self.user_name, font=("Arial", 10, "bold")).grid(row=0, column=1, sticky="w", pady=5, padx=(10, 0))
        
        ttk.Label(main_frame, text="Tu·ªïi:").grid(row=1, column=0, sticky="w", pady=5)
        self.age_var = tk.StringVar(value=current_info.get("age", ""))
        ttk.Entry(main_frame, textvariable=self.age_var, width=30).grid(row=1, column=1, pady=5, padx=(10, 0))
        
        ttk.Label(main_frame, text="ƒê·ªãa ch·ªâ:").grid(row=2, column=0, sticky="w", pady=5)
        self.address_var = tk.StringVar(value=current_info.get("address", ""))
        ttk.Entry(main_frame, textvariable=self.address_var, width=30).grid(row=2, column=1, pady=5, padx=(10, 0))
        
        # N√∫t
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=20)
        
        ttk.Button(button_frame, text="üíæ L∆∞u", command=self.save_changes).pack(side="left", padx=5)
        ttk.Button(button_frame, text="‚ùå H·ªßy", command=self.window.destroy).pack(side="left", padx=5)

    def save_changes(self):
        """L∆∞u thay ƒë·ªïi"""
        age = self.age_var.get().strip()
        address = self.address_var.get().strip()
        
        if self.encoder.update_user_info(self.user_name, age, address):
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin cho '{self.user_name}'")
            self.callback()
            self.window.destroy()
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng")


def main():
    """H√†m main ch·∫°y ·ª©ng d·ª•ng"""
    try:
        root = tk.Tk()
        app = SimpleFaceRecognitionApp(root)
        root.mainloop()
    except Exception as e:
        print(f"L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {str(e)}")


if __name__ == "__main__":
    main()